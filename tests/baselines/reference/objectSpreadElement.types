=== tests/cases/conformance/es6/destructuring/objectSpreadElement.ts ===
let o = { a: 1, b: 'no' }
>o : { a: number; b: string; }
>{ a: 1, b: 'no' } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>'no' : "no"

let o2 = { b: 'yes', c: true }
>o2 : { b: string; c: boolean; }
>{ b: 'yes', c: true } : { b: string; c: boolean; }
>b : string
>'yes' : "yes"
>c : boolean
>true : true

let swap = { a: 'yes', b: -1 };
>swap : { a: string; b: number; }
>{ a: 'yes', b: -1 } : { a: string; b: number; }
>a : string
>'yes' : "yes"
>b : number
>-1 : -1
>1 : 1

let addAfter: { a: number, b: string, c: boolean } =
>addAfter : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { ...o, c: false }
>{ ...o, c: false } : { ...{ a: number; b: string; }, ...{ c: false; } }
>o : any
>c : boolean
>false : false

let addBefore: { a: number, b: string, c: boolean } =
>addBefore : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { c: false, ...o }
>{ c: false, ...o } : { ...{ c: false; }, ...{ a: number; b: string; } }
>c : boolean
>false : false
>o : any

// Note: ignore still changes the order that properties are printed
let ignore: { a: number, b: string } =
>ignore : { a: number; b: string; }
>a : number
>b : string

    { b: 'ignored', ...o }
>{ b: 'ignored', ...o } : { ...{ b: string; }, ...{ a: number; b: string; } }
>b : string
>'ignored' : "ignored"
>o : any

let override: { a: number, b: string } =
>override : { a: number; b: string; }
>a : number
>b : string

    { ...o, b: 'override' }
>{ ...o, b: 'override' } : { ...{ a: number; b: string; }, ...{ b: string; } }
>o : any
>b : string
>'override' : "override"

let nested: { a: number, b: boolean, c: string } =
>nested : { a: number; b: boolean; c: string; }
>a : number
>b : boolean
>c : string

    { ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' }
>{ ...{ a: 3, ...{ b: false, c: 'overriden' } }, c: 'whatever' } : { ...{ ...{ a: number; }, ...{ b: boolean; c: string; } }, ...{ c: string; } }
>{ a: 3, ...{ b: false, c: 'overriden' } } : { ...{ a: number; }, ...{ b: boolean; c: string; } }
>a : number
>3 : 3
>{ b: false, c: 'overriden' } : { b: boolean; c: string; }
>b : boolean
>false : false
>c : string
>'overriden' : "overriden"
>c : string
>'whatever' : "whatever"

let combined: { a: number, b: string, c: boolean } =
>combined : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { ...o, ...o2 }
>{ ...o, ...o2 } : { ...{ a: number; b: string; }, ...{ b: string; c: boolean; } }
>o : any
>o2 : any

let combinedBefore: { a: number, b: string, c: boolean } =
>combinedBefore : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { b: 'ok', ...o, ...o2 }
>{ b: 'ok', ...o, ...o2 } : { ...{ b: string; }, ...{ a: number; b: string; }, ...{ b: string; c: boolean; } }
>b : string
>'ok' : "ok"
>o : any
>o2 : any

let combinedMid: { a: number, b: string, c: boolean } =
>combinedMid : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { ...o, b: 'ok', ...o2 }
>{ ...o, b: 'ok', ...o2 } : { ...{ a: number; b: string; }, ...{ b: string; }, ...{ b: string; c: boolean; } }
>o : any
>b : string
>'ok' : "ok"
>o2 : any

let combinedAfter: { a: number, b: string, c: boolean } =
>combinedAfter : { a: number; b: string; c: boolean; }
>a : number
>b : string
>c : boolean

    { ...o, ...o2, b: 'ok' }
>{ ...o, ...o2, b: 'ok' } : { ...{ a: number; b: string; }, ...{ b: string; c: boolean; }, ...{ b: string; } }
>o : any
>o2 : any
>b : string
>'ok' : "ok"

let combinedNested: { a: number, b: boolean, c: string, d: string } =
>combinedNested : { a: number; b: boolean; c: string; d: string; }
>a : number
>b : boolean
>c : string
>d : string

    { ...{ a: 4, ...{ b: false, c: 'overriden' } }, d: 'actually new', ...{ a: 5, d: 'maybe new' } }
>{ ...{ a: 4, ...{ b: false, c: 'overriden' } }, d: 'actually new', ...{ a: 5, d: 'maybe new' } } : { ...{ ...{ a: number; }, ...{ b: boolean; c: string; } }, ...{ d: string; }, ...{ a: number; d: string; } }
>{ a: 4, ...{ b: false, c: 'overriden' } } : { ...{ a: number; }, ...{ b: boolean; c: string; } }
>a : number
>4 : 4
>{ b: false, c: 'overriden' } : { b: boolean; c: string; }
>b : boolean
>false : false
>c : string
>'overriden' : "overriden"
>d : string
>'actually new' : "actually new"
>{ a: 5, d: 'maybe new' } : { a: number; d: string; }
>a : number
>5 : 5
>d : string
>'maybe new' : "maybe new"

let combinedNestedChangeType: { a: number, b: boolean, c: number } =
>combinedNestedChangeType : { a: number; b: boolean; c: number; }
>a : number
>b : boolean
>c : number

    { ...{ a: 1, ...{ b: false, c: 'overriden' } }, c: -1 }
>{ ...{ a: 1, ...{ b: false, c: 'overriden' } }, c: -1 } : { ...{ ...{ a: number; }, ...{ b: boolean; c: string; } }, ...{ c: number; } }
>{ a: 1, ...{ b: false, c: 'overriden' } } : { ...{ a: number; }, ...{ b: boolean; c: string; } }
>a : number
>1 : 1
>{ b: false, c: 'overriden' } : { b: boolean; c: string; }
>b : boolean
>false : false
>c : string
>'overriden' : "overriden"
>c : number
>-1 : -1
>1 : 1

let propertyNested: { a: { a: number, b: string } } =
>propertyNested : { a: { a: number; b: string; }; }
>a : { a: number; b: string; }
>a : number
>b : string

    { a: { ... o } }
>{ a: { ... o } } : { a: { ...{ a: number; b: string; } }; }
>a : { ...{ a: number; b: string; } }
>{ ... o } : { ...{ a: number; b: string; } }
>o : any

// accessors don't copy the descriptor
// (which means that readonly getters become read/write properties)
let op = { get a () { return 6 } };
>op : { readonly a: number; }
>{ get a () { return 6 } } : { readonly a: number; }
>a : number
>6 : 6

let getter: { a: number, c: number } =
>getter : { a: number; c: number; }
>a : number
>c : number

    { ...op, c: 7 }
>{ ...op, c: 7 } : { ...{ readonly a: number; }, ...{ c: number; } }
>op : any
>c : number
>7 : 7

getter.a = 12;
>getter.a = 12 : 12
>getter.a : number
>getter : { a: number; c: number; }
>a : number
>12 : 12

// null and undefined are just skipped
let spreadNull: { a: number } =
>spreadNull : { a: number; }
>a : number

    { a: 7, ...null }
>{ a: 7, ...null } : { ...{ a: number; } }
>a : number
>7 : 7
>null : null

let spreadUndefined: { a: number } =
>spreadUndefined : { a: number; }
>a : number

    { a: 7, ...undefined }
>{ a: 7, ...undefined } : { ...{ a: number; } }
>a : number
>7 : 7
>undefined : any

// methods are not enumerable
class C { p = 1; m() { } }
>C : C
>p : number
>1 : 1
>m : () => void

let c: C = new C()
>c : C
>C : C
>new C() : C
>C : typeof C

let spreadC: { p: number } = { ...c }
>spreadC : { p: number; }
>p : number
>{ ...c } : { ...C }
>c : any

// own methods are enumerable
let cplus: { p: number, plus(): void } = { ...c, plus() { return this.p + 1; } };
>cplus : { p: number; plus(): void; }
>p : number
>plus : () => void
>{ ...c, plus() { return this.p + 1; } } : { ...C, ...{ plus(): any; } }
>c : any
>plus : () => any
>this.p + 1 : any
>this.p : any
>this : any
>p : any
>1 : 1

cplus.plus();
>cplus.plus() : void
>cplus.plus : () => void
>cplus : { p: number; plus(): void; }
>plus : () => void

// new field's type conflicting with existing field is OK
let changeTypeAfter: { a: string, b: string } =
>changeTypeAfter : { a: string; b: string; }
>a : string
>b : string

    { ...o, a: 'wrong type?' }
>{ ...o, a: 'wrong type?' } : { ...{ a: number; b: string; }, ...{ a: string; } }
>o : any
>a : string
>'wrong type?' : "wrong type?"

let changeTypeBefore: { a: number, b: string } =
>changeTypeBefore : { a: number; b: string; }
>a : number
>b : string

    { a: 'wrong type?', ...o };
>{ a: 'wrong type?', ...o } : { ...{ a: string; }, ...{ a: number; b: string; } }
>a : string
>'wrong type?' : "wrong type?"
>o : any

let changeTypeBoth: { a: string, b: number } =
>changeTypeBoth : { a: string; b: number; }
>a : string
>b : number

    { ...o, ...swap };
>{ ...o, ...swap } : { ...{ a: number; b: string; }, ...{ a: string; b: number; } }
>o : any
>swap : any

// optional
let definiteBoolean: { sn: boolean };
>definiteBoolean : { sn: boolean; }
>sn : boolean

let definiteString: { sn: string };
>definiteString : { sn: string; }
>sn : string

let optionalString: { sn?: string };
>optionalString : { sn?: string; }
>sn : string

let optionalNumber: { sn?: number };
>optionalNumber : { sn?: number; }
>sn : number

let optionalUnionStops: { sn: string | number | boolean } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
>optionalUnionStops : { sn: string | number | boolean; }
>sn : string | number | boolean
>{ ...definiteBoolean, ...definiteString, ...optionalNumber } : { ...{ sn: boolean; }, ...{ sn: string; }, ...{ sn?: number; } }
>definiteBoolean : any
>definiteString : any
>optionalNumber : any

let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
>optionalUnionDuplicates : { sn: string | number; }
>sn : string | number
>{ ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber } : { ...{ sn: boolean; }, ...{ sn: string; }, ...{ sn?: string; }, ...{ sn?: number; } }
>definiteBoolean : any
>definiteString : any
>optionalString : any
>optionalNumber : any

let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };
>allOptional : { sn?: string | number; }
>sn : string | number
>{ ...optionalString, ...optionalNumber } : { ...{ sn?: string; }, ...{ sn?: number; } }
>optionalString : any
>optionalNumber : any

// computed property
let computedFirst: { a: number, b: string, "before everything": number } =
>computedFirst : { a: number; b: string; "before everything": number; }
>a : number
>b : string

    { ['before everything']: 12, ...o, b: 'yes' }
>{ ['before everything']: 12, ...o, b: 'yes' } : { ...{ ['before everything']: number; }, ...{ a: number; b: string; }, ...{ b: string; } }
>'before everything' : "before everything"
>12 : 12
>o : any
>b : string
>'yes' : "yes"

let computedMiddle: { a: number, b: string, c: boolean, "in the middle": number } =
>computedMiddle : { a: number; b: string; c: boolean; "in the middle": number; }
>a : number
>b : string
>c : boolean

    { ...o, ['in the middle']: 13, b: 'maybe?', ...o2 }
>{ ...o, ['in the middle']: 13, b: 'maybe?', ...o2 } : { ...{ a: number; b: string; }, ...{ ['in the middle']: number; b: string; }, ...{ b: string; c: boolean; } }
>o : any
>'in the middle' : "in the middle"
>13 : 13
>b : string
>'maybe?' : "maybe?"
>o2 : any

let computedAfter: { a: number, b: string, "at the end": number } =
>computedAfter : { a: number; b: string; "at the end": number; }
>a : number
>b : string

    { ...o, b: 'yeah', ['at the end']: 14 }
>{ ...o, b: 'yeah', ['at the end']: 14 } : { ...{ a: number; b: string; }, ...{ b: string; ['at the end']: number; } }
>o : any
>b : string
>'yeah' : "yeah"
>'at the end' : "at the end"
>14 : 14

// generics
function f<T, U>(t: T, u: U): { id: string, ...T, ...U } {
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>T : T
>U : U
>t : T
>T : T
>u : U
>U : U
>id : string
>T : T
>U : U

    return { id: 'id', ...t, ...u };
>{ id: 'id', ...t, ...u } : { ...{ id: string; }, ...T, ...U }
>id : string
>'id' : "id"
>t : any
>u : any
}
let exclusive: { id: string, a: number, b: string, c: string, d: boolean } =
>exclusive : { id: string; a: number; b: string; c: string; d: boolean; }
>id : string
>a : number
>b : string
>c : string
>d : boolean

    f({ a: 1, b: 'yes' }, { c: 'no', d: false })
>f({ a: 1, b: 'yes' }, { c: 'no', d: false }) : { ...{ id: string; }, ...{ a: number; b: string; }, ...{ c: string; d: boolean; } }
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>{ a: 1, b: 'yes' } : { a: number; b: string; }
>a : number
>1 : 1
>b : string
>'yes' : "yes"
>{ c: 'no', d: false } : { c: string; d: false; }
>c : string
>'no' : "no"
>d : boolean
>false : false

let overlap: { id: string, a: number, b: string } =
>overlap : { id: string; a: number; b: string; }
>id : string
>a : number
>b : string

    f({ a: 1 }, { a: 2, b: 'extra' })
>f({ a: 1 }, { a: 2, b: 'extra' }) : { ...{ id: string; }, ...{ a: number; }, ...{ a: number; b: string; } }
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>{ a: 1 } : { a: number; }
>a : number
>1 : 1
>{ a: 2, b: 'extra' } : { a: number; b: string; }
>a : number
>2 : 2
>b : string
>'extra' : "extra"

let overlapConflict: { id:string, a: string } =
>overlapConflict : { id: string; a: string; }
>id : string
>a : string

    f({ a: 1 }, { a: 'mismatch' })
>f({ a: 1 }, { a: 'mismatch' }) : { ...{ id: string; }, ...{ a: number; }, ...{ a: string; } }
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>{ a: 1 } : { a: number; }
>a : number
>1 : 1
>{ a: 'mismatch' } : { a: string; }
>a : string
>'mismatch' : "mismatch"

let overwriteId: { id: boolean, a: number, c: number, d: string } =
>overwriteId : { id: boolean; a: number; c: number; d: string; }
>id : boolean
>a : number
>c : number
>d : string

    f({ a: 1, id: true }, { c: 1, d: 'no' })
>f({ a: 1, id: true }, { c: 1, d: 'no' }) : { ...{ id: string; }, ...{ a: number; id: boolean; }, ...{ c: number; d: string; } }
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>{ a: 1, id: true } : { a: number; id: true; }
>a : number
>1 : 1
>id : boolean
>true : true
>{ c: 1, d: 'no' } : { c: number; d: string; }
>c : number
>1 : 1
>d : string
>'no' : "no"

class D { m() { }; q = 2; }
>D : D
>m : () => void
>q : number
>2 : 2

let classesAreWrong: { id: string, ...C, ...D } =
>classesAreWrong : { ...{ id: string; }, ...C, ...D }
>id : string
>C : C
>D : D

    f(new C(), new D())
>f(new C(), new D()) : { ...{ id: string; }, ...C, ...D }
>f : <T, U>(t: T, u: U) => { ...{ id: string; }, ...T, ...U }
>new C() : C
>C : typeof C
>new D() : D
>D : typeof D

