tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(13,30): error TS2339: Property 'x' does not exist on type '{ ...PublicX, ...PrivateOptionalX }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(16,5): error TS2322: Type '{ ...{ sn?: string; }, ...{ sn?: number; } }' is not assignable to type '{ sn: string | number; }'.
  Property 'sn' is optional in type '{ ...{ sn?: string; }, ...{ sn?: number; } }' but required in type '{ sn: string | number; }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(22,5): error TS2322: Type '{ s: string; }' is not assignable to type '{ ...Bool, ...Str }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(24,1): error TS2322: Type 'Bool' is not assignable to type '{ ...Bool, ...Str }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(27,15): error TS2696: Spread properties must be identifiers, property accesses, or object literals.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(28,15): error TS2696: Spread properties must be identifiers, property accesses, or object literals.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(31,36): error TS2300: Duplicate identifier 'b'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(31,53): error TS2300: Duplicate identifier 'b'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(36,12): error TS2339: Property 'b' does not exist on type '{ ...{ b: number; } }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(42,9): error TS2339: Property 'm' does not exist on type '{ ...C }'.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(45,1): error TS2349: Cannot invoke an expression whose type lacks a call signature. Type '{ ...PublicX }' has no compatible call signatures.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(46,1): error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.
tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts(48,39): error TS2696: Spread properties must be identifiers, property accesses, or object literals.


==== tests/cases/conformance/es6/destructuring/objectSpreadElementNegative.ts (13 errors) ====
    let o = { a: 1, b: 'no' }
    
    /// private propagates
    class PrivateOptionalX {
        private x?: number;
    }
    class PublicX {
        public x: number;
    }
    let privateOptionalx: PrivateOptionalX;
    let publicx: PublicX;
    let o3 = { ...publicx, ...privateOptionalx };
    let sn: string | number = o3.x; // error, x is private
                                 ~
!!! error TS2339: Property 'x' does not exist on type '{ ...PublicX, ...PrivateOptionalX }'.
    let optionalString: { sn?: string };
    let optionalNumber: { sn?: number };
    let allOptional: { sn: string | number } = { ...optionalString, ...optionalNumber };
        ~~~~~~~~~~~
!!! error TS2322: Type '{ ...{ sn?: string; }, ...{ sn?: number; } }' is not assignable to type '{ sn: string | number; }'.
!!! error TS2322:   Property 'sn' is optional in type '{ ...{ sn?: string; }, ...{ sn?: number; } }' but required in type '{ sn: string | number; }'.
    // error, 'sn' is optional in source, required in target
    
    // assignability as target
    interface Bool { b: boolean };
    interface Str { s: string };
    let spread: { ...Bool, ...Str } = { s: 'foo' }; // error, missing 'b'
        ~~~~~~
!!! error TS2322: Type '{ s: string; }' is not assignable to type '{ ...Bool, ...Str }'.
    let b: Bool;
    spread = b; // error, missing 's'
    ~~~~~~
!!! error TS2322: Type 'Bool' is not assignable to type '{ ...Bool, ...Str }'.
    
    // expressions are not allowed
    let o1 = { ...1 + 1 };
                  ~~~~~
!!! error TS2696: Spread properties must be identifiers, property accesses, or object literals.
    let o2 = { ...(1 + 1) };
                  ~~~~~~~
!!! error TS2696: Spread properties must be identifiers, property accesses, or object literals.
    
    // literal repeats are not allowed, but spread repeats are fine
    let duplicated = { b: 'bad', ...o, b: 'bad', ...o2, b: 'bad' }
                                       ~
!!! error TS2300: Duplicate identifier 'b'.
                                                        ~
!!! error TS2300: Duplicate identifier 'b'.
    let duplicatedSpread = { ...o, ...o }
    
    // write-only properties get skipped
    let setterOnly = { ...{ set b (bad: number) { } } };
    setterOnly.b = 12; // error, 'b' does not exist
               ~
!!! error TS2339: Property 'b' does not exist on type '{ ...{ b: number; } }'.
    
    // methods are skipped because they aren't enumerable
    class C { p = 1; m() { } }
    let c: C = new C()
    let spreadC = { ...c }
    spreadC.m(); // error 'm' is not in '{ ... c }'
            ~
!!! error TS2339: Property 'm' does not exist on type '{ ...C }'.
    
    let callableConstructableSpread: { ...PublicX, (n: number): number, new (p: number) };
    callableConstructableSpread(12); // error, no call signature
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2349: Cannot invoke an expression whose type lacks a call signature. Type '{ ...PublicX }' has no compatible call signatures.
    new callableConstructableSpread(12); // error, no construct signature
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.
    
    let callableSpread = { ...publicx, ...(n => n + 1) }; // error, can't spread functions
                                          ~~~~~~~~~~~~
!!! error TS2696: Spread properties must be identifiers, property accesses, or object literals.
    